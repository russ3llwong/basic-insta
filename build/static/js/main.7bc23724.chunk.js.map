{"version":3,"sources":["redux/actions/messageActions.js","App.js","serviceWorker.js","redux/reducers/messageReducer.js","index.js"],"names":["handlTextChange","text","type","Message","_ref","data","react_default","a","createElement","connect","state","messages","messageReducer","_ref2","dispatch","React","useEffect","axios","get","then","res","catch","e","console","log","className","map","message","i","App_Message","key","value","onChange","target","onClick","getState","post","Boolean","window","location","hostname","match","INITIAL_STATE","arguments","length","undefined","action","Object","objectSpread","concat","toConsumableArray","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","WebSocket","host","split","port","onmessage","insertMessage","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bc23724.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const updateMessages = messages => {\n  return {\n    type: 'UPDATE_MESSAGES',\n    messages,\n  };\n};\n\nexport const insertMessage = message => {\n  console.log('inserting message')\n  return {\n    type: 'INSERT_MESSAGE',\n    message,\n  };\n};\n\nexport const handlTextChange = text => {\n  return {\n    type: 'UPDATE_TEXT',\n    text,\n  };\n};\n\nexport const submitMessage = () => (dispatch, getState) => {\n  axios.post('/messanger/postMessage', { message: getState().messageReducer.text })\n    .then(() => { })\n    .catch(e => console.log(e));\n  dispatch(handlTextChange(''));\n};","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { updateMessages, handlTextChange, submitMessage } from './redux/actions/messageActions';\nimport './App.css';\n\nconst Message = ({ data }) => (<div>{data}</div>);\n\nconst App = ({ dispatch, text, messages }) => {\n  React.useEffect(() => {\n    axios.get('/messanger/getMessages')\n      .then((res) => {\n        dispatch(updateMessages(res.data));\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  const onSubmit = () => {\n    dispatch(submitMessage());\n  }\n\n  const handleTextChange = (e) => {\n    dispatch(handlTextChange(e.target.value));\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <div className=\"message-area\">\n          {messages.map((message, i) => <Message key={i} data={message} />)}\n        </div>\n      </div>\n      <div>\n        <input type=\"text\" value={text} onChange={handleTextChange} />\n      </div>\n      <div>\n        <button onClick={onSubmit}>Submit</button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    messages: state.messageReducer.messages,\n    text: state.messageReducer.text,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\n  messages: [],\n  text: '',\n};\n\nconst messageReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'UPDATE_MESSAGES':\n      return {\n        ...state,\n        messages: action.messages,\n      };\n    case 'UPDATE_TEXT':\n      return {\n        ...state,\n        text: action.text,\n      };\n    case 'INSERT_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.message],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport messageReducer from './redux/reducers/messageReducer';\nimport { insertMessage } from './redux/actions/messageActions';\n\n\nconst rootReducer = combineReducers({\n  messageReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nconst webSocket = new WebSocket('ws://' + window.location.host.split(':')[0] + (window.location.port && `:${window.location.port}`) + '/websocket');\n\n\nwebSocket.onmessage = (message) => {\n  console.log(message)\n  store.dispatch(insertMessage(message.data));\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}